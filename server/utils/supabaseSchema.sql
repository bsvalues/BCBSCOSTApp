-- Supabase Schema for BCBS Cost Analysis Application
-- This SQL file defines the schema for the Supabase database

-- Enable Row Level Security (RLS)
alter default privileges in schema public revoke all on tables from public;

-- Scenarios Table
create table if not exists public.scenarios (
  id bigint generated by default as identity primary key,
  name varchar(255) not null,
  description text,
  parameters jsonb not null default '{}'::jsonb,
  results jsonb,
  user_id bigint not null,
  base_calculation_id bigint,
  is_saved boolean not null default false,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null
);

-- Scenario Variations Table
create table if not exists public.scenario_variations (
  id bigint generated by default as identity primary key,
  scenario_id bigint not null references public.scenarios(id) on delete cascade,
  name varchar(255) not null,
  parameter_key varchar(100) not null,
  original_value varchar(255) not null,
  new_value varchar(255) not null,
  impact_value varchar(255),
  impact_percentage varchar(50),
  created_at timestamp with time zone default now() not null
);

-- Scenario Impacts Table
create table if not exists public.scenario_impacts (
  id bigint generated by default as identity primary key,
  scenario_id bigint not null references public.scenarios(id) on delete cascade,
  type varchar(50) not null,
  summary text not null,
  details jsonb not null default '{}'::jsonb,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null
);

-- User Properties Table
create table if not exists public.user_properties (
  id bigint generated by default as identity primary key,
  user_id bigint not null,
  property_id bigint not null,
  is_favorite boolean not null default false,
  notes text,
  created_at timestamp with time zone default now() not null,
  updated_at timestamp with time zone default now() not null,
  unique(user_id, property_id)
);

-- Calculation History Table
create table if not exists public.calculation_history (
  id bigint generated by default as identity primary key,
  user_id bigint not null,
  calculation_type varchar(50) not null,
  inputs jsonb not null default '{}'::jsonb,
  results jsonb not null default '{}'::jsonb,
  created_at timestamp with time zone default now() not null
);

-- Function to list all tables
create or replace function get_tables()
returns table (table_name text, schema_name text)
language sql
as $$
  select table_name::text, table_schema::text
  from information_schema.tables
  where table_schema = 'public'
  order by table_name;
$$;

-- Enable Row Level Security
alter table public.scenarios enable row level security;
alter table public.scenario_variations enable row level security;
alter table public.scenario_impacts enable row level security;
alter table public.user_properties enable row level security;
alter table public.calculation_history enable row level security;

-- Create policies for scenarios table
create policy "Allow users to select their own scenarios"
  on public.scenarios for select
  using (user_id = auth.uid());

create policy "Allow users to insert their own scenarios"
  on public.scenarios for insert
  with check (user_id = auth.uid());

create policy "Allow users to update their own scenarios"
  on public.scenarios for update
  using (user_id = auth.uid());

create policy "Allow users to delete their own scenarios"
  on public.scenarios for delete
  using (user_id = auth.uid());

-- Create policies for scenario_variations table
create policy "Allow users to select their own scenario variations"
  on public.scenario_variations for select
  using (scenario_id in (select id from public.scenarios where user_id = auth.uid()));

create policy "Allow users to insert variations for their own scenarios"
  on public.scenario_variations for insert
  with check (scenario_id in (select id from public.scenarios where user_id = auth.uid()));

create policy "Allow users to update variations for their own scenarios"
  on public.scenario_variations for update
  using (scenario_id in (select id from public.scenarios where user_id = auth.uid()));

create policy "Allow users to delete variations for their own scenarios"
  on public.scenario_variations for delete
  using (scenario_id in (select id from public.scenarios where user_id = auth.uid()));

-- Create policies for scenario_impacts table
create policy "Allow users to select impacts for their own scenarios"
  on public.scenario_impacts for select
  using (scenario_id in (select id from public.scenarios where user_id = auth.uid()));

-- Create policies for user_properties table
create policy "Allow users to select their own property relationships"
  on public.user_properties for select
  using (user_id = auth.uid());

create policy "Allow users to insert their own property relationships"
  on public.user_properties for insert
  with check (user_id = auth.uid());

create policy "Allow users to update their own property relationships"
  on public.user_properties for update
  using (user_id = auth.uid());

create policy "Allow users to delete their own property relationships"
  on public.user_properties for delete
  using (user_id = auth.uid());

-- Create policies for calculation_history table
create policy "Allow users to select their own calculation history"
  on public.calculation_history for select
  using (user_id = auth.uid());

create policy "Allow users to insert their own calculation history"
  on public.calculation_history for insert
  with check (user_id = auth.uid());

-- Optional: bypass RLS for development (comment out for production)
-- In development, we can check for a service key and bypass RLS
-- alter policy "Allow users to select their own scenarios" on public.scenarios using (true);
-- alter policy "Allow users to insert their own scenarios" on public.scenarios with check (true);
-- alter policy "Allow users to update their own scenarios" on public.scenarios using (true);
-- alter policy "Allow users to delete their own scenarios" on public.scenarios using (true);